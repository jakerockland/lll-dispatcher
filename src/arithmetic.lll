;;; ---------------------------------------------------------------------------
;;; @title An example contract.
;;; @author Daniel Ellison <daniel@syrinx.net>
;;;
;;; Copyright 2016, 2017 Daniel Ellison
;;;
;;;    Licensed under the Apache License, Version 2.0 (the "License");
;;;    you may not use this file except in compliance with the License.
;;;    You may obtain a copy of the License at
;;;
;;;      http://www.apache.org/licenses/LICENSE-2.0
;;;
;;;    Unless required by applicable law or agreed to in writing, software
;;;    distributed under the License is distributed on an "AS IS" BASIS,
;;;    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;    See the License for the specific language governing permissions and
;;;    limitations under the License.

(seq

  ;; --------------------------------------------------------------------------
  ;; CONSTRUCTOR

  ;; Bring in our macro definitions.
  (include "../stdlib/stdlib.lll")
  (include "macros.lll")

  ;; Make sure we're working with the right standard library version.
  (when (!= stdlib-version required-stdlib)
    (jump invalid-location))

  ;; --------------------------------------------------------------------------
  ;; CONTRACT CODE

  (returnlll
    (seq contract-enabled

      ;; ----------------------------------------------------------------------
      ;; @notice Initialize the contract function return sizes.
      ;; @dev Signature: initialize()

      (function initialize
        (seq only-owner

          ;; Set up function return sizes for this contract. Adding the
          ;; contract address and the function hash together makes each
          ;; function return size storage location unique to this contract.
          (sstore (+ @@contract-address replace) 32)
          (sstore (+ @@contract-address double) 32)
          (sstore (+ @@contract-address halve) 32)

          ;; Emit an event about the initialization.
          (mstore call-result true)
          (log1 call-result 32
              (sha3 0x00 (lit 0x00 "Initialized(bool)")))

          (stop)))

      ;; ----------------------------------------------------------------------
      ;; @notice Replace this contract with the one at the address provided.
      ;; @dev Signature: replace(address)
      ;; @param replacement The replacement contract.

      (def 'replacement (calldataload 0x04))

      (function replace
        (seq only-owner no-contract-address

          ;; Disable this contract.
          (sstore @@contract-address false)

          ;; Save old and new contract addresses to memory for logging.
          (mstore old-address @@contract-address)
          (mstore new-address replacement)

          ;; Set new contract address and enable it.
          (sstore contract-address @new-address)
          (sstore @@contract-address true)

          ;; Call the replacement contract's initialize() function.
          (mstore call-data (shift-left initialize))
          (delegatecall (- (gas) hold-back) @@contract-address call-data 32 return-data 0)

          ;; Emit an event about the replacement.
          (log2 new-address 32
              (sha3 0x00 (lit 0x00 "Replaced(address,address)"))
              @old-address)

          (stop)))

      ;; ----------------------------------------------------------------------
      ;; @notice Multiply the supplied number by 2.
      ;; @dev Signature: double(uint256)
      ;; @param multiplicand The number to double.
      ;; @return The product of the multiplication.

      (def 'multiplicand (calldataload 0x04))

      (function double
        (seq

          ;; Do the doubling and save the result.
          (mstore call-result (mul multiplicand 2))

          ;; Return the result of the multiplication.
          (return call-result 32)))

      ;; ----------------------------------------------------------------------
      ;; @notice Divide the supplied number by 2.
      ;; @dev Signature: halve(uint256)
      ;; @param dividend The number to halve.
      ;; @return The quotient of the division.

      (def 'dividend (calldataload 0x04))

      (function halve
        (seq

          ;; Do the halving and save the result.
          (mstore call-result (div dividend 2))

          ;; Return the result of the division.
          (return call-result 32)))

      ;; ----------------------------------------------------------------------
      ;; @notice Fallback: No functions matched the function ID provided so we
      ;;         jump to an invalid location. This causes an exception in the
      ;;         EVM which results in any ether sent to the contract to be
      ;;         returned to the caller.

      (jump invalid-location)))

)
