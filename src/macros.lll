;;; ---------------------------------------------------------------------------
;;; @title Macros for the function dispatcher.
;;; @author Daniel Ellison <daniel@syrinx.net>
;;;
;;; Copyright 2016, 2017 Daniel Ellison
;;;
;;;    Licensed under the Apache License, Version 2.0 (the "License");
;;;    you may not use this file except in compliance with the License.
;;;    You may obtain a copy of the License at
;;;
;;;      http://www.apache.org/licenses/LICENSE-2.0
;;;
;;;    Unless required by applicable law or agreed to in writing, software
;;;    distributed under the License is distributed on an "AS IS" BASIS,
;;;    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;    See the License for the specific language governing permissions and
;;;    limitations under the License.

(seq

  ;; --------------------------------------------------------------------------
  ;; Constant definitions.

  ;; Required standard library version.
  (def 'required-stdlib "0.1.2")

  ;; Memory layout.
  (def 'short-hash  0x0300)
  (def 'old-address 0x0320)
  (def 'new-address 0x0340)

  ;; Storage layout.
  (def 'contract-owner   0x00)
  (def 'contract-address 0x01)

  ;; Precomputed function IDs.
  (def 'initialize 0x8129fc1c) ; initialize()
  (def 'replace    0xcabfb934) ; replace(address)
  (def 'double     0xeee97206) ; double(uint256)
  (def 'halve      0x20fb79e7) ; halve(uint256)

  ;; --------------------------------------------------------------------------
  ;; @notice Check whether the contract is enabled.

  (def 'contract-enabled
    (when (= (sload @@contract-address) false)
      (jump invalid-location)))

  ;; --------------------------------------------------------------------------
  ;; @notice Check that the caller is the contract owner.

  (def 'only-owner
    (when (!= (caller) @@contract-owner)
      (jump invalid-location)))

  ;; --------------------------------------------------------------------------
  ;; @notice Check whether a contract address has been provided.

  (def 'no-contract-address
    (when (= (calldataload 0x04) 0x00)
      (jump invalid-location)))

  ;; --------------------------------------------------------------------------
  ;; @notice Retrieves data return size for a given function ID.

  (def 'return-size
    (sload (+ @@contract-address @short-hash)))

)
